// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DictionaryPage /> renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            Object {
              "definition": "When Forcing you are making the player holding the disc throw a certain direction. A break is when your attempt fails and they throw the direction you are guarding against. A teammate may yell “no break!” if there is an opposing player wide open on the guarded side, this means try extra hard to guard that side.",
              "id": 0,
              "text": "Break",
            },
            Object {
              "definition": "Happens when a freshly pulled disc goes out-of-bounds. The receiving team take the disc to the brick-mark which is centrally located and 20 yards in-field from the first end zone line. A brick is signified by clapping hands once over head or by calling “Brick.”",
              "id": 1,
              "text": "Brick",
            },
          ],
          "id": 1,
          "title": "B",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={
      Array [
        0,
      ]
    }
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "backgroundColor": "#2a9e91",
              "color": "white",
              "fontWeight": "bold",
              "marginBottom": 5,
              "padding": 15,
            }
          }
        >
          B
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text
            style={
              Object {
                "borderBottomColor": "#e5e5e5",
                "borderBottomWidth": 1,
                "padding": 15,
              }
            }
          >
            Break
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text
            style={
              Object {
                "borderBottomColor": "#e5e5e5",
                "borderBottomWidth": 1,
                "padding": 15,
              }
            }
          >
            Brick
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    useNativeDriver={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgba(0,0,0,0.5)",
          "bottom": 0,
          "left": 0,
          "opacity": 1,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "flex-start",
          "marginTop": "10%",
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "white",
            "borderRadius": 10,
            "elevation": 10,
            "maxHeight": "80%",
            "maxWidth": "80%",
            "minWidth": "60%",
            "padding": 20,
            "shadowColor": "#000",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.25,
            "shadowRadius": 3.84,
          }
        }
      >
        <Text
          style={
            Object {
              "fontSize": 20,
              "fontWeight": "bold",
              "marginBottom": 20,
              "textAlign": "center",
            }
          }
        >
          
        </Text>
        
        <Text
          style={
            Object {
              "alignSelf": "flex-start",
              "fontSize": 16,
              "marginBottom": 20,
            }
          }
        >
          
        </Text>
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#fff",
              "borderColor": "#2a9e91",
              "borderRadius": 5,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "center",
              "marginTop": 20,
              "opacity": 1,
              "paddingHorizontal": 20,
              "paddingVertical": 10,
              "width": 120,
            }
          }
          testID="button"
        >
          <Text
            style={
              Object {
                "color": "#2a9e91",
                "fontSize": 16,
                "fontWeight": "bold",
              }
            }
          >
            Back
          </Text>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
